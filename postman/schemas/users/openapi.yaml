openapi: 3.0.3
info:
  title: CoderDojo Zen Users API
  description: This is a sample server for a pet store.
  termsOfService: http://example.com/terms/
  contact:
    name: API Support
    url: http://www.example.com/support
    email: support@example.com
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
externalDocs:
  description: Find out more about this API
  url: http://api.coderdojokinsale.com
servers:
  - url: http://192.168.1.20:8084
    description: Users Service
  - url: http://192.168.1.20:8080
    description: API Gateway
paths:
  /users:
    summary: A sample summary for this `Path Object`.
    description: A sample description for this `Path Object`.
    get:
      tags:
        - "Users"
      summary: A sample summary for this `Path Item Object`.
      description: A sample description for this `Path Item Object`.
      externalDocs:
        description: External Documentation
        url: http://www.example.com/
      operationId: getUsers
      responses:
        default:
          description: "Default response for GET"
    post:
      tags:
        - "Users"
      summary: A sample summary for this `Path Item Object`.
      description: A sample description for this `Path Item Object`.
      externalDocs:
        description: External Documentation
        url: http://www.example.com/
      operationId: createUsers
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
      security:
      - bearerAuth: []
  /users/{id}:
    parameters:
      - $ref: '#/components/parameters/ID'
    get:
      tags:
        - "Users"
      summary: A sample summary for this `Path Item Object`.
      description: A sample description for this `Path Item Object`.
      externalDocs:
        description: External Documentation
        url: http://www.example.com/
      operationId: getUserById
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
    put:
      tags:
        - "Users"
      summary: A sample summary for this `Path Item Object`.
      description: A sample description for this `Path Item Object`.
      externalDocs:
        description: External Documentation
        url: http://www.example.com/
      operationId: updateUserById
      responses:
        200:
          description: Returns a list of all lights in the system. If there are no lights in the system then the bridge will return an empty object, {}.
          content:
            application/json:
              schema:
                type: object
    delete:
      tags:
        - "Users"
      summary: A sample summary for this `Path Item Object`.
      description: A sample description for this `Path Item Object`.
      externalDocs:
        description: External Documentation
        url: http://www.example.com/
      operationId: deleteUserById
      responses:
        200:
          description: Returns a list of all lights in the system. If there are no lights in the system then the bridge will return an empty object, {}.
          content:
            application/json:
              schema:
                type: object
components:
  parameters:
    ID:
      name: id
      required: true
      in: path
      description: ID of the resource
      schema:
        type: string
tags:
  - name: Users
    description: A sample description for this `Tag Object`
    externalDocs:
        description: External Documentation
        url: http://www.example.com/